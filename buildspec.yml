version: 0.2

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - echo "AWS_REGION is $AWS_REGION "
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/govwifi/logging-api
      - echo "REPOSITORY_URI is $REPOSITORY_URI"
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG="latest"
      - echo "$DOCKER_HUB_AUTHTOKEN_ENV" | docker login -u $(echo $DOCKER_HUB_USERNAME_ENV) --password-stdin
      - echo "Acceptance tests project name is $ACCEPTANCE_TESTS_PROJECT_NAME"
      - BUILD_ID=$(aws codebuild start-build --project-name $ACCEPTANCE_TESTS_PROJECT_NAME | jq -r '.build.id')
      - echo "Acceptance tests have started. BUILD_ID is $BUILD_ID"
      - BUILD_STATUS=$(aws codebuild batch-get-builds --ids $BUILD_ID | jq -r '.builds[].buildStatus')
      - echo "Build status is $BUILD_STATUS"
      - |
        while [ $BUILD_STATUS = "IN_PROGRESS" ] ; do
            echo "Build status is $BUILD_STATUS"
            BUILD_STATUS=$(aws codebuild batch-get-builds --ids $BUILD_ID | jq -r '.builds[].buildStatus')
            if [ $BUILD_STATUS = "FAILED" ]
            then
              echo "Frontend acceptance tests have failed. Please inspect them $BUILD_ID"
              exit 1;
              break
            elif [ $BUILD_STATUS = "SUCCEEDED" ]
            then
              echo "Acceptance tests successful."
              break
            fi
            echo "Acceptance tests status is $BUILD_STATUS"
            sleep 30s
          done
  build:
    commands:
      - echo Build started on `date`
      - BUNDLE_INSTALL_CMD="set -x ; bundle install --jobs 20 --retry 5"
      - echo Building the Docker image...
      - docker build --build-arg BUNDLE_INSTALL_CMD='bundle install --jobs 20 --retry 5' -t $REPOSITORY_URI:$IMAGE_TAG .
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"logging-api","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - set +x
